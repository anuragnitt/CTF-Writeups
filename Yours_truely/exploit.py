from Crypto.Util.Padding import unpad
from Crypto.Cipher import AES
from base64 import b64decode

"""
#sagecell.sagemath.org
def fermat_factor(n):
    if is_even(n):
        return [2, n/2]
    a = ceil(sqrt(n))
    while not is_square(a*a - n):
        a = a + 1
    b = sqrt(a*a - n)
    return [a - b, a + b]


def find_cmd(n):
    p, q = fermat_factor(n)
    e = 65537
    phi = (p-1)*(q-1)
    d = pow(e, -1, phi)
    n = p*q
    X = hashlib.sha512(b'the_proof_of_your_love').digest()
    X = int(X.hex(), 16)
    return pow(X, d, n)

n = 9647964850885209761858901278069169010573986493397412878380704698569525297866214917767097426913272377803706623707674071545750846746959570711847071741471821875969235334689210686665146157341083361304256568441893642759224640630038597365704528542010939607312987484911849895595779162319239833083212165147495199229438132275477381319524841256745374014821863792850184194452879703489810161208891323773462843774310126188303503229027299032097563146541082131772809198806865051291359346801975020955337767936049702057551795683939779275298308705897309889398297737771787648300392409369436389156763203421690268168569137927059810290173
print(find_cmd(n))
"""

key = b'None\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c'
cipher = b64decode(b'DcB1jFnP4qa7OIn7r1Tccw3yR5DopnXY3gTJpzAr/g4=')

for i in range(256):
    for j in range(256):
        iv = bytes([96, 133, i, j]) + b'\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c'
        try:
            plain = AES.new(key, AES.MODE_CBC, iv).decrypt(cipher)
            plain = unpad(plain, AES.block_size)
            if plain[:5] == b'Hero{':
                print(plain.decode())
                exit(0)
        except:
            continue

